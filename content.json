{"meta":{"title":"Smilecoc's Blog","subtitle":null,"description":"Welcome to My Blog","author":"Smilecoc","url":"http://yoursite.com","root":"/"},"pages":[{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-01-30T06:32:51.659Z","comments":false,"path":"bangumi/index.html","permalink":"http://yoursite.com/bangumi/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"client/index.html","permalink":"http://yoursite.com/client/index.html","excerpt":"","text":"直接下载 or 扫码下载："},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"lab/index.html","permalink":"http://yoursite.com/lab/index.html","excerpt":"","text":"sakura主题balabala"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-02-05T07:03:44.491Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-02-20T14:09:48.466Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"[さくら荘のSmilecoc] 与&nbsp; Smilecoc&nbsp; （ こんにちは ） 对话中... function bot_ui_ini() { var botui = new BotUI(\"hello-mashiro\"); botui.message.add({ delay: 800, content: \"Hi, there👋\" }).then(function () { botui.message.add({ delay: 1100, content: \"这里是 Smilecoc\" }).then(function () { botui.message.add({ delay: 1100, content: \"一个爱折腾的的蓝孩子~\" }).then(function () { botui.action.button({ delay: 1600, action: [{ text: \"然后呢？ 😃\", value: \"sure\" }, { text: \"少废话！ 🙄\", value: \"skip\" }] }).then(function (a) { \"sure\" == a.value && sure(); \"skip\" == a.value && end() }) }) }) }); var sure = function () { botui.message.add({ delay: 600, content: \"😘\" }).then(function () { secondpart() }) }, end = function () { botui.message.add({ delay: 600, content: \"![...](https://view.moezx.cc/images/2018/05/06/a1c4cd0452528b572af37952489372b6.md.jpg)\" }) }, secondpart = function () { botui.message.add({ delay: 1500, content: \"毕业于沈阳工业大学\" }).then(function () { botui.message.add({ delay: 1500, content: \"学的物流却误入IT行业…\" }).then(function () { botui.message.add({ delay: 1200, content: \"从此踏上撸代码的不归路\" }).then(function () { botui.message.add({ delay: 1500, content: \"主攻Python和SQL，疯狂写过VBA，偶尔也折腾 HTML/CSS/JavaScript/R\" }).then(function () { botui.message.add({ delay: 1500, content: \"希望研究的方向，是数据分析（data science），数据仓库（data warehouse）以及机器学习（machine learning）\" }).then(function () { botui.message.add({ delay: 1800, content: \"喜欢游戏，动漫，摄影，永远在折腾自己喜欢的事情\" }).then(function () { botui.action.button({ delay: 1100, action: [{ text: \"为什么叫Smilecoc呢？ 🤔\", value: \"why-mashiro\" }] }).then(function (a) { thirdpart() }) }) }) }) }) }) }) }, thirdpart = function () { botui.message.add({ delay: 1E3, content: \"其实是瞎取得~，希望可以永远smile吧coc\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"为什么要建立这个网站呢？ 🤔\", value: \"why-cat\" }] }).then(function (a) { fourthpart() }) }) }, fourthpart = function () { botui.message.add({ delay: 1E3, content: \"算是在对的时间遇上了对的人吧… \" }).then(function () { botui.message.add({ delay: 1100, content: \"而且可以留下一些很酷的东西，不是吗\" }).then(function () { botui.action.button({ delay: 1500, action: [{ text: \"域名有什么含意吗？(ง •_•)ง\", value: \"why-domain\" }] }).then(function (a) { fifthpart() }) }) }) }, fifthpart = function () { botui.message.add({ delay: 1E3, content: \"emmmm，带有花名而且便宜=.= \" }).then(function () { botui.message.add({ delay: 1600, content: \"那么，仔细看看我的博客吧？ ^_^\" }) }) } } bot_ui_ini()"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"comment/index.html","permalink":"http://yoursite.com/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"donate/index.html","permalink":"http://yoursite.com/donate/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-01-29T08:36:05.608Z","comments":false,"path":"music/index.html","permalink":"http://yoursite.com/music/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-06-01T14:21:46.000Z","comments":true,"path":"rss/index.html","permalink":"http://yoursite.com/rss/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"http://yoursite.com/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-06-01T14:21:46.000Z","comments":false,"path":"video/index.html","permalink":"http://yoursite.com/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-02-20T13:49:33.577Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"B站每日排行榜爬虫","slug":"B站每日排行榜爬虫","date":"2020-02-15T07:59:01.000Z","updated":"2020-02-20T10:38:12.640Z","comments":true,"path":"2020/02/15/B站每日排行榜爬虫/","link":"","permalink":"http://yoursite.com/2020/02/15/B站每日排行榜爬虫/","excerpt":"","text":"爬取B站排行榜前100名的视频名称，作者和播放量，用到的主要有request库获取网页信息，用正则解析网页并使用openpyxl将信息保存在Excel中 第一部分为请求网页获取信息部分，request库的基本用法 def get_html_text(url,self_header): try: response = requests.get(url,headers=self_header,timeout=30) response.raise_for_status() response.encoding = response.apparent_encoding #print(response.text) return response.text except: return &quot;&quot; 第二部分为用正则表达式解析网页内容并保存到Excel def re_get_inf(html): list=[] rank_list=re.findall(r&#39;&lt;div class=&quot;num&quot;&gt;(\\d*)&lt;/div&gt;&#39;,html)#排名 title_list=re.findall(r&#39;&lt;div class=&quot;info&quot;&gt;&lt;a href=[\\s\\S]*?class=&quot;title&quot;&gt;([\\s\\S]*?)&lt;/a&gt;&lt;!----&gt;&#39;,html)#视频名称 play_num=re.findall(r&#39;&lt;div class=&quot;detail&quot;&gt;&lt;span class=&quot;data-box&quot;&gt;&lt;i class=&quot;b-icon play&quot;&gt;&lt;/i&gt;(\\d*.\\d*)\\S&lt;/span&gt;&#39;,html)#播放量 author_list=re.findall(r&#39;&lt;span class=&quot;data-box&quot;&gt;&lt;i class=&quot;b-icon author&quot;&gt;&lt;/i&gt;([\\s\\S]*?)&lt;/span&gt;&#39;,html)#UP主名称 wb=Workbook()#新建保存文件 sheet=wb.active sheet.append([&#39;rank&#39;,&#39;title&#39;,&#39;playnum&#39;,&#39;author&#39;])#写入标题名称 for i in range(len(rank_list)): rank = rank_list[i] title = title_list[i] playnum=play_num[i] author=author_list[i] sheet.append([rank,title,playnum,author])#写入数据 wb.save(&#39;bilibili_rankdata.xlsx&#39;)#保存文件 完整代码如下所示，代码与结果文件链接可以点击以下链接： https://github.com/smilecoc/bilibili_rankdata #Bilibili每日热榜爬虫 import re import requests from openpyxl import Workbook def get_html_text(url,self_header): try: response = requests.get(url,headers=self_header,timeout=30) response.raise_for_status() response.encoding = response.apparent_encoding #print(response.text) return response.text except: return &quot;&quot; def re_get_inf(html): list=[] rank_list=re.findall(r&#39;&lt;div class=&quot;num&quot;&gt;(\\d*)&lt;/div&gt;&#39;,html) title_list=re.findall(r&#39;&lt;div class=&quot;info&quot;&gt;&lt;a href=[\\s\\S]*?class=&quot;title&quot;&gt;([\\s\\S]*?)&lt;/a&gt;&lt;!----&gt;&#39;,html) play_num=re.findall(r&#39;&lt;div class=&quot;detail&quot;&gt;&lt;span class=&quot;data-box&quot;&gt;&lt;i class=&quot;b-icon play&quot;&gt;&lt;/i&gt;(\\d*.\\d*)\\S&lt;/span&gt;&#39;,html) author_list=re.findall(r&#39;&lt;span class=&quot;data-box&quot;&gt;&lt;i class=&quot;b-icon author&quot;&gt;&lt;/i&gt;([\\s\\S]*?)&lt;/span&gt;&#39;,html) wb=Workbook() sheet=wb.active sheet.append([&#39;rank&#39;,&#39;title&#39;,&#39;playnum&#39;,&#39;author&#39;]) for i in range(len(rank_list)): rank = rank_list[i] title = title_list[i] playnum=play_num[i] author=author_list[i] sheet.append([rank,title,playnum,author]) wb.save(&#39;bilibili_rankdata.xlsx&#39;) def main(): bilibili_url=&#39;https://www.bilibili.com/ranking/all/0/0/3&#39; self_header = { &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&quot; } html=get_html_text(bilibili_url,self_header) re_get_inf(html) if __name__ == &#39;__main__&#39;: main()","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"python爬虫","slug":"python爬虫","permalink":"http://yoursite.com/tags/python爬虫/"}],"author":"smilecoc"},{"title":"Hexo Sakura主题的问题汇总","slug":"Hexo Sakura主题遇到的问题汇总","date":"2020-02-02T14:02:02.000Z","updated":"2020-02-22T13:12:58.682Z","comments":true,"path":"2020/02/02/Hexo Sakura主题遇到的问题汇总/","link":"","permalink":"http://yoursite.com/2020/02/02/Hexo Sakura主题遇到的问题汇总/","excerpt":"","text":"代码高亮刚用的时候代码框十分诡异而且压根就没有高亮。找了几种方法并不可行，整理了一下几种可能错误的原因。错误可能为1.markdown(md)语法问题，将代码块改为如下格式： ```+语言名（比如java）代码内容``` 2.与hexo自带的高亮冲突了，只要把站点配置文件中： highlight: enable: true true改为false就可以了。注意是站点配置文件而不是主题配置文件 搜索搜索一直不能用的原因就是少了个插件。 git bash中执行： npm install hexo-generator-json-content --save 文章内插入图片在文章中写入: ![](/upload_image/1.jpg) 然后进入themes-主题名-source-upload_image目录下(自己创建)，将图片放到这个目录下，就可以了。 说明：当执行hexo g命令时，会自动把图片复制到 public文件的upload_image目录下。 赞赏页面的作者名称修改赞赏页面的页脚作者永远是原作者的名称，可能是没有链接到变量的bug吧 修改方法为将”\\blog\\themes\\Sakura\\themes\\Sakura\\layout\\donate.ejs”中的 &lt;h3 itemprop=&quot;name&quot;&gt; &lt;a href=&quot;&lt;%- theme.url%&gt;&quot; itemprop=&quot;url&quot; rel=&quot;author&quot;&gt;houjun&lt;/a&gt; &lt;/h3&gt; “houjun”换为自己的名字就可以了 另外有一写其他的相似问题比如友链页面的 主题工具在themes\\sakura\\layout\\layout.ejs中： &lt;div class=&quot;scrollbar&quot; id=&quot;bar&quot;&gt; &lt;/div&gt; 前面添加： &lt;%- partial(&#39;_partial/setdisplay&#39;) %&gt; &lt;%- partial(&#39;_partial/set&#39;, null, {cache: !config.relative_link}) %&gt; 原版是在&lt;%- partial(‘_partial/mheader’, null, {cache: !config.relative_link}) %&gt;前添加的，但要这样字体切换会出bug。 在\\themes\\sakura\\layout_partial中新建set.ejs，内容： &lt;div class=&quot;changeSkin-gear no-select&quot;&gt; &lt;div class=&quot;keys&quot; id=&quot;setbtn&quot;&gt; &lt;span id=&quot;open-skinMenu&quot;&gt; SCHEME TOOL | 主题工具 &amp;nbsp; &lt;i class=&quot;iconfont icon-gear inline-block rotating&quot;&gt; &lt;/i&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; 新建setdisplay.ejs，内容： &lt;div class=&quot;skin-menu no-select&quot; id=&quot;mainskin&quot; style=&quot;position: fixed&quot;&gt; &lt;div class=&quot;theme-controls row-container&quot;&gt; &lt;p style=&quot;text-align:center;font-family:&#39;Monaco&#39;;font-weight:bold;color:#444&quot;&gt;&lt;i style=&quot;color:grey&quot; class=&quot;fa fa-chevron-left&quot;&gt;&lt;/i&gt; background &lt;i style=&quot;color:grey&quot; class=&quot;fa fa-chevron-right&quot;&gt;&lt;/i&gt;&lt;/p&gt; &lt;ul class=&quot;menu-list&quot;&gt; &lt;li id=&quot;white-bg&quot;&gt; &lt;i class=&quot;fa fa-television&quot; aria-hidden=&quot;true&quot;&gt; &lt;/i&gt; &lt;/li&gt; &lt;li id=&quot;sakura-bg&quot;&gt; &lt;i class=&quot;iconfont icon-sakura&quot;&gt; &lt;/i&gt; &lt;/li&gt; &lt;li id=&quot;gribs-bg&quot;&gt; &lt;i class=&quot;fa fa-slack&quot; aria-hidden=&quot;true&quot;&gt; &lt;/i&gt; &lt;/li&gt; &lt;li id=&quot;KAdots-bg&quot;&gt; &lt;i class=&quot;iconfont icon-dots&quot;&gt; &lt;/i&gt; &lt;/li&gt; &lt;li id=&quot;totem-bg&quot;&gt; &lt;i class=&quot;fa fa-optin-monster&quot; aria-hidden=&quot;true&quot;&gt; &lt;/i&gt; &lt;/li&gt; &lt;li id=&quot;pixiv-bg&quot;&gt; &lt;i class=&quot;iconfont icon-pixiv&quot;&gt; &lt;/i&gt; &lt;/li&gt; &lt;li id=&quot;bing-bg&quot;&gt; &lt;i class=&quot;iconfont icon-bing&quot;&gt; &lt;/i&gt; &lt;/li&gt; &lt;li id=&quot;dark-bg&quot;&gt; &lt;i class=&quot;fa fa-moon-o&quot; aria-hidden=&quot;true&quot;&gt; &lt;/i&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;canvas id=&quot;night-mode-cover&quot;&gt; &lt;/canvas&gt; &lt;/div&gt; 还要修点bug： 在\\themes\\sakura\\source\\js\\sakura-app.js中，找到函数$(‘.skin-menu #dark-bg’).click(function ()，函数最底下添加： setCookie(&#39;bgImgSetting&#39;,&#39;https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/other/starry_sky.png&#39;,30)把所有形如： $(&#39;.changeSkin-gear, .toc&#39;).css(&#39;background&#39;, &#39;none&#39;) 或 $(&#39;.changeSkin-gear, .toc&#39;).css(&#39;background&#39;, &#39;rgba(255,255,255,0.8)&#39;) 里的.changeSkin-gear,删掉。 这只是初始版，后面还有更高级的。 更换bing图片bing主题是从bing随机图片api获取一张图片做背景，可以更换。 在\\themes\\sakura\\source\\js\\sakura-app.js中，下面两句： changeBGnoTrans(&#39;#bing-bg&#39;, &#39;https://api.shino.cc/bing/&#39;) else if (bgurl == &#39;https://api.shino.cc/bing/&#39;) 其中的网址换成其他url。 位置和外观在set.ejs里直接用css美化，可能还要修正setdisplay.ejs。 参考配置： set.ejs： &lt;div class=&quot;changeSkin-gear no-select&quot; style=&quot;background: rgba(0, 0, 0, 0) none repeat scroll 0% 0%; visibility: visible; bottom: 0px;&quot;&gt; &lt;div class=&quot;keys&quot; id=&quot;setbtn&quot;&gt; &lt;button id=&quot;open-skinMenu&quot;&gt; &lt;style&gt; button#open-skinMenu{ transition: all 0.2s linear 0s; outline:none; position:fixed; bottom:13px; left:15px; font-size:16px; background-color: rgba(255,255,255,.95); border-radius: 20px; box-shadow: 0 3px 8px 0 rgba(0,0,0,0.1), 0 3px 8px 0 rgba(0,0,0,0.1); } button#open-skinMenu:hover{ transition: all 0.2s linear 0s; background-color: rgb(255, 165, 0); color: rgba(255,255,255); } &lt;/style&gt; &lt;i class=&quot;iconfont icon-gear inline-block rotating&quot;&gt; &lt;/i&gt; SCHEME TOOL | 主题工具 &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; 文章列表图片拉伸问题浏览某个分类或标签下的文章下时，配图是被压缩成正方形的,导致原来的图片产生变形解决办法为：在\\themes\\sakura\\source\\css\\style.css中，找到.feature img，内部添加： object-fit: cover; 对主题进行魔改生成网页的代码都在\\blog\\themes\\Sakura\\themes\\Sakura\\layout文件夹中，通过名称可以找到整个网页的代码，对照生成的网页源码找到对应的额文件进行修改即可。不清楚相对路径是否形同，可以多多进行尝试 参考文章/网站：ctz’s blogyremp’s blog","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}],"author":"smilecoc"},{"title":"定制系统与使用方式资源","slug":"定制系统资源","date":"2019-12-31T16:00:00.000Z","updated":"2020-02-20T13:47:33.138Z","comments":true,"path":"2020/01/01/定制系统资源/","link":"","permalink":"http://yoursite.com/2020/01/01/定制系统资源/","excerpt":"","text":"定制系统资源下载 https://www.drblack-system.com/index.php/system/ 系统安装方法之：PE安装 https://www.drblack-system.com/index.php/2019/08/19/%e7%b3%bb%e7%bb%9f%e5%ae%89%e8%a3%85%e6%96%b9%e6%b3%95%e4%b9%8b%ef%bc%9ape%e5%ae%89%e8%a3%85/ 系统安装方法之：硬盘安装 https://www.drblack-system.com/index.php/2019/03/24/bilibili-os%e3%81%ae%e7%a1%ac%e7%9b%98%e5%ae%89%e8%a3%85%e6%96%b9%e6%b3%95/","categories":[{"name":"资源","slug":"资源","permalink":"http://yoursite.com/categories/资源/"}],"tags":[{"name":"其他资源","slug":"其他资源","permalink":"http://yoursite.com/tags/其他资源/"}],"author":"smilecoc"},{"title":"SQL实现筛选出连续3天登录用户","slug":"SQL实现筛选出连续3天登录用户","date":"2019-12-25T08:24:08.000Z","updated":"2020-02-20T13:47:51.944Z","comments":true,"path":"2019/12/25/SQL实现筛选出连续3天登录用户/","link":"","permalink":"http://yoursite.com/2019/12/25/SQL实现筛选出连续3天登录用户/","excerpt":"","text":"这个问题虽然说难不难，但说易也不简单，而且，偏受大小厂喜欢。其实，不管是数仓/ETL/BI/数据分析/大数据等方向，都会经常被面试/笔试考察到。 1.还原场景 - 建表select * from tmp.tmp_last_3_day;2.解决问题关键-分析解决问题的关键是：如何判断连续 可通过对user_id分组排序后（rn），用登录日期减去序号m,如果连续的话，则得到的这个日期（flag_date）会相同即： flag_date=login_date-rn对应SQL：date_sub(login_date,rn) 3.SQL实现连续3天登录的用户id ­­ sql如下： select user_id,count(1） cnt --date_sub(login_date,t.rn) flag_date from ( select user_id,login_date, row_number() over(partition by user_id order by login_date) as rn from tmp.tmp_last_3_day ) t group by user_id,date_sub(login_date,t.rn) having count(1)&gt;=3; 我们再来看下结果： 其实，方法有很多，上面只是选了一种技巧性比较强的一种。下面也是一种不错的方法。 select count(distinct b.id) as c1 from ( select id,date,lead(date,2,-1) over(partition by user_id order by date desc) as date1 from tb_use a group by id.date ) as b where date_sub(cast(b.date as date),2)=cast(b.date1 as date);","categories":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/categories/笔记/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"}],"author":"smilecoc"},{"title":"简单实用的SQL脚本汇总","slug":"简单实用的SQL脚本汇总","date":"2019-09-30T16:00:01.000Z","updated":"2020-02-20T16:09:46.998Z","comments":true,"path":"2019/10/01/简单实用的SQL脚本汇总/","link":"","permalink":"http://yoursite.com/2019/10/01/简单实用的SQL脚本汇总/","excerpt":"","text":"1、行转列的用法PIVOTCREATE table test (id int,name nvarchar(20),quarter int,number int) insert into test values(1,N&#39;苹果&#39;,1,1000) insert into test values(1,N&#39;苹果&#39;,2,2000) insert into test values(1,N&#39;苹果&#39;,3,4000) insert into test values(1,N&#39;苹果&#39;,4,5000) insert into test values(2,N&#39;梨子&#39;,1,3000) insert into test values(2,N&#39;梨子&#39;,2,3500) insert into test values(2,N&#39;梨子&#39;,3,4200) insert into test values(2,N&#39;梨子&#39;,4,5500) select * from test 结果： select ID,NAME, [1] as &#39;一季度&#39;, [2] as &#39;二季度&#39;, [3] as &#39;三季度&#39;, [4] as &#39;四季度&#39; from test pivot ( sum(number) for quarter in ([1],[2],[3],[4]) ) as pvt 结果： 2、列转行的用法UNPIOVTcreate table test2 (id int,name varchar(20), Q1 int, Q2 int, Q3 int, Q4 int) insert into test2 values(1,&#39;苹果&#39;,1000,2000,4000,5000) insert into test2 values(2,&#39;梨子&#39;,3000,3500,4200,5500) select * from test2 结果： --列转行 select id,name,quarter,number from test2 unpivot ( number for quarter in ([Q1],[Q2],[Q3],[Q4]) ) as unpvt 结果： 3、字符串替换SUBSTRING/REPLACESELECT REPLACE(&#39;abcdefg&#39;,SUBSTRING(&#39;abcdefg&#39;,2,4),&#39;**&#39;) 结果： SELECT REPLACE(&#39;12345678@qq.com&#39;,&#39;1234567&#39;,&#39;******&#39;) 结果： 4、查询一个表内相同纪录 HAVINGHR.Employees表的表结构：如果一个ID可以区分的话，可以这么写 select * from HR.Employees where title in ( select title from HR.Employees group by title having count(1)&gt;1) 结果： 对比一下发现，ID为1,2的被过滤掉了，因为他们只有一条记录 如果有几个ID需要区分的话可以这么写 select * from HR.Employees where title+titleofcourtesy in (select title+titleofcourtesy from HR.Employees group by title,titleofcourtesy having count(1)&gt;1) 结果： title在和titleofcourtesy进行拼接后符合条件的就只有ID为6,7,8,9的了 5、把多行SQL数据变成一条多列数据，即新增列SELECT id, name, SUM(CASE WHEN quarter=1 THEN number ELSE 0 END) &#39;一季度&#39;, SUM(CASE WHEN quarter=2 THEN number ELSE 0 END) &#39;二季度&#39;, SUM(CASE WHEN quarter=3 THEN number ELSE 0 END) &#39;三季度&#39;, SUM(CASE WHEN quarter=4 THEN number ELSE 0 END) &#39;四季度&#39; FROM test GROUP BY id,name 结果： 我们将原来的4列增加到了6列。细心的朋友可能发现了这个结果和上面的行转列怎么一模一样？其实上面的行转列是省略写法，这种是比较通用的写法。 6、表复制语法1：Insert INTO table(field1,field2,…) values(value1,value2,…) 语法2：Insert into Table2(field1,field2,…) select value1,value2,… from Table1 （要求目标表Table2必须存在，由于目标表Table2已经存在，所以我们除了插入源表Table1的字段外，还可以插入常量。） 语法3：SELECT vale1, value2 into Table2 from Table1 （要求目标表Table2不存在，因为在插入时会自动创建表Table2，并将Table1中指定字段数据复制到Table2中。） 语法4：使用导入导出功能进行全表复制。如果是使用【编写查询以指定要传输的数据】，那么在大数据表的复制就会有问题？因为复制到一定程度就不再动了，内存爆了？它也没有写入到表中。而使用上面3种语法直接执行是会马上刷新到数据库表中的，你刷新一下mdf文件就知道了。 7、利用带关联子查询Update语句更新数据--方法1： Update Table1 set c = (select c from Table2 where a = Table1.a) where c is null --方法2： update A set newqiantity=B.qiantity from A,B where A.bnum=B.bnum --方法3： update (select A.bnum ,A.newqiantity,B.qiantity from A left join B on A.bnum=B.bnum) AS C set C.newqiantity = C.qiantity where C.bnum =&#39;001&#39; 8、连接远程服务器--方法1： select * from openrowset( &#39;SQLOLEDB&#39;, &#39;server=192.168.0.1;uid=sa;pwd=password&#39;, &#39;SELECT * FROM dbo.test&#39;) --方法2： select * from openrowset( &#39;SQLOLEDB&#39;, &#39;192.168.0.1&#39;; &#39;sa&#39;; &#39;password&#39;, &#39;SELECT * FROM dbo.test&#39;) 当然也可以参考以前的示例，建立DBLINK进行远程连接 9、Date 和 Time 样式 CONVERTCONVERT() 函数是把日期转换为新数据类型的通用函数。CONVERT() 函数可以用不同的格式显示日期/时间数据。 语法: CONVERT(data_type(length),data_to_be_converted,style) data_type(length) 规定目标数据类型（带有可选的长度）。data_to_be_converted 含有需要转换的值。style 规定日期/时间的输出格式。 可以使用的 style 值： SELECT CONVERT(varchar(100), GETDATE(), 0) --结果： 01 2 2019 9:33PM SELECT CONVERT(varchar(100), GETDATE(), 1) --结果： 01/02/19 SELECT CONVERT(varchar(100), GETDATE(), 2) --结果： 19.01.02 SELECT CONVERT(varchar(100), GETDATE(), 3) --结果： 02/01/19 SELECT CONVERT(varchar(100), GETDATE(), 4) --结果： 02.01.19 SELECT CONVERT(varchar(100), GETDATE(), 5) --结果： 02-01-19 SELECT CONVERT(varchar(100), GETDATE(), 6) --结果： 02 01 19 SELECT CONVERT(varchar(100), GETDATE(), 7) --结果： 01 02, 19 SELECT CONVERT(varchar(100), GETDATE(), 8) --结果： 21:33:18 SELECT CONVERT(varchar(100), GETDATE(), 9) --结果： 01 2 2019 9:33:18:780PM SELECT CONVERT(varchar(100), GETDATE(), 10) --结果： 01-02-19 SELECT CONVERT(varchar(100), GETDATE(), 11) --结果： 19/01/02 SELECT CONVERT(varchar(100), GETDATE(), 12) --结果： 190102 SELECT CONVERT(varchar(100), GETDATE(), 13) --结果： 02 01 2019 21:33:18:780 SELECT CONVERT(varchar(100), GETDATE(), 14) --结果： 21:33:18:780 SELECT CONVERT(varchar(100), GETDATE(), 20) --结果： 2019-01-02 21:33:18 SELECT CONVERT(varchar(100), GETDATE(), 21) --结果： 2019-01-02 21:33:18.780 SELECT CONVERT(varchar(100), GETDATE(), 22) --结果： 01/02/19 9:33:18 PM SELECT CONVERT(varchar(100), GETDATE(), 23) --结果： 2019-01-02 SELECT CONVERT(varchar(100), GETDATE(), 24) --结果： 21:33:18 SELECT CONVERT(varchar(100), GETDATE(), 25) --结果： 2019-01-02 21:33:18.780 SELECT CONVERT(varchar(100), GETDATE(), 100) --结果： 01 2 2019 9:33PM SELECT CONVERT(varchar(100), GETDATE(), 101) --结果： 01/02/2019 SELECT CONVERT(varchar(100), GETDATE(), 102) --结果： 2019.01.02 SELECT CONVERT(varchar(100), GETDATE(), 103) --结果： 02/01/2019 SELECT CONVERT(varchar(100), GETDATE(), 104) --结果： 02.01.2019 SELECT CONVERT(varchar(100), GETDATE(), 105) --结果： 02-01-2019 SELECT CONVERT(varchar(100), GETDATE(), 106) --结果： 02 01 2019 SELECT CONVERT(varchar(100), GETDATE(), 107) --结果： 01 02, 2019 SELECT CONVERT(varchar(100), GETDATE(), 108) --结果： 21:33:18 SELECT CONVERT(varchar(100), GETDATE(), 109) --结果： 01 2 2019 9:33:18:780PM SELECT CONVERT(varchar(100), GETDATE(), 110) --结果： 01-02-2019 SELECT CONVERT(varchar(100), GETDATE(), 111) --结果： 2019/01/02 SELECT CONVERT(varchar(100), GETDATE(), 112) --结果： 20190102 SELECT CONVERT(varchar(100), GETDATE(), 113) --结果： 02 01 2019 21:33:18:780 SELECT CONVERT(varchar(100), GETDATE(), 114) --结果： 21:33:18:780 SELECT CONVERT(varchar(100), GETDATE(), 120) --结果： 2019-01-02 21:33:18 SELECT CONVERT(varchar(100), GETDATE(), 121) --结果： 2019-01-02 21:33:18.780 10、SQL中的相除方法一 --SQL中的相除 SELECT CASE WHEN ISNULL(A-B,0)=0 THEN &#39;&#39; ELSE CAST(CONVERT(DECIMAL(18,2),A*100.0/(A-B)) AS VARCHAR(10))+&#39;%&#39; END AS &#39;百分数&#39; --FROM 表 这里我们先要判断被除数是否为0，如果为0给出一个想输出的结果，这里我们返回空白(是字符类型，不是NULL)，在不为0的时候就给出具体的计算公式，然后转换成字符类型再和“%”进行拼接。例如： SELECT CASE WHEN ISNULL(5-2,0)=0 THEN &#39;&#39; ELSE CAST(CONVERT(DECIMAL(18,2),5*100.0/(5-2)) AS VARCHAR(10))+&#39;%&#39; END AS &#39;百分数&#39; --FROM 表 返回的结果： 方法二 SELECT (CONVERT(VARCHAR(20),ROUND(41*100.0/88,3))+&#39;%&#39;) AS &#39;百分比&#39; --FROM A 执行结果： 11、四舍五入ROUND函数ROUND ( numeric_expression , length [ ,function ] )function 必须为 tinyint、smallint 或 int。如果省略 function 或其值为 0（默认值），则将舍入 numeric_expression。如果指定了0以外的值，则将截断 numeric_expression。 SELECT ROUND(150.45648, 2); --保留小数点后两位，需要四舍五入 --结果： 150.46000 SELECT ROUND(150.45648, 2, 0); --保留小数点后两位，0为默认值，表示进行四舍五入 --结果： 150.46000 SELECT ROUND(150.45648, 2, 1); --保留小数点后两位，不需要四舍五入，这里除0以外都是有同样的效果， --与Oracle的TRUNC函数效果相同 --结果： 150.45000 SELECT ROUND(150.45648, 2, 2); --保留小数点后两位，不需要四舍五入，这里除0以外都是有同样的效果， --与Oracle的TRUNC函数效果相同 --结果： 150.45000 12、对字段出现NULL值的处理方法一 --CASE SELECT CASE WHEN &#39;字段名&#39; IS NULL THEN &#39;NULL&#39; ELSE CONVERT(VARCHAR(20),&#39;字段名1&#39;) END AS &#39;NewName&#39; --结果： 字段名1 SELECT CASE WHEN NULL IS NULL THEN &#39;N&#39; ELSE CONVERT(VARCHAR(20),NULL) END AS &#39;NewName&#39; --结果： N 方法二 --SQL Server 2005：COALESCE SELECT COALESCE(&#39;字符串类型字段&#39;,&#39;N&#39;) AS &#39;NewName&#39; --结果： 字符串类型字段 SELECT COALESCE(CONVERT(VARCHAR(20),&#39;非字符串类型字段&#39;),&#39;N&#39;) AS &#39;NewName&#39; --结果： 非字符串类型字段 SELECT COALESCE(CONVERT(VARCHAR(20),NULL),&#39;N&#39;) AS &#39;NewName&#39; --结果： N --COALESCE,返回其参数中的第一个非空表达式 SELECT COALESCE(NULL,NULL,1,2,NULL) --结果： 1 SELECT COALESCE(NULL,11,12,13,NULL) --结果： 11 SELECT COALESCE(111,112,113,114,NULL) --结果： 111 *13、COUNT的几种情况--以下三种方法均可统计出表的记录数 --第一种 select count(*) from tablename --第二种 select count(ID) from tablename --第三种,1换成其它值也是可以的 select count(1) from tablename 14、UNION ALL多表插入把两个相同结构的表union后插入到一个新表中，当然两个以上的相同结构的表也是可以的，这里的相同是指两个或多个表的列数和每个对应列的类型相同，列名称可以不同 select * into table_new from table_1 union all select * from table_2 15、查看数据库缓存的SQLuse master declare @dbid int Select @dbid = dbid from sysdatabases where name = &#39;SQL_ROAD&#39;--修改成数据库的名称 select dbid,UseCounts ,RefCounts,CacheObjtype,ObjType, DB_Name(dbid) as DatabaseName,SQL from syscacheobjects where dbid=@dbid order by dbid,useCounts desc,objtype 我们可以看到数据库中当前正在运行的SQL有哪些 16、删除计划缓存--删除整个数据库的计划缓存 DBCC FREEPROCCACHE --删除某个数据库的计划缓存 USE master DECLARE @dbid INT SELECT @dbid=dbid FROM sysdatabases WHERE NAME = &#39;SQL_ROAD&#39; DBCC FLUSHPROCINDB (@dbid) 17、SQL换行SQL的换行制表符 CHAR(9)换行符 CHAR(10)回车 CHAR(13) PRINT &#39;SQL&#39;+CHAR(13)+&#39;ROAD&#39; PRINT &#39;SQL&#39;+CHAR(10)+&#39;ROAD&#39; PRINT &#39;SQL&#39;+CHAR(9)+&#39;ROAD&#39; 执行结果： 如果将查询结果以文本格式显示，而不是网格格式显示，SELECT语句也适用，我们先将查询结果改成以文本格式显示 --以文本格式显示结果 SELECT &#39;SQL&#39;+ CHAR(10)+&#39;ROAD&#39; SELECT &#39;SQL&#39;+ CHAR(13)+&#39;ROAD&#39; SELECT &#39;SQL&#39; + CHAR(10) + CHAR(13) + &#39;ROAD&#39; 结果如下： 18、TRUNCATE TABLE [Table Name]TRUNCATE 是SQL中的一个删除数据表内容的语句，用法是： TRUNCATE TABLE [Table Name] 速度快,而且效率高,因为:TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。TRUNCATE TABLE 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。 如果想保留标识计数值，请改用 DELETE。 如果要删除表定义及其数据，请使用 DROP TABLE 语句。对于由 FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 WHERE 子句的 DELETE 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。TRUNCATE TABLE 不能用于参与了索引视图的表。 19、常用系统检测脚本--查看内存状态 dbcc memorystatus --查看哪个引起的阻塞，blk EXEC sp_who active --查看锁住了那个资源id，objid EXEC sp_lock 还有如何查看查询分析器的SPID，可以在查询分析器的状态栏看到，比如sa(57),这就表示当前查询分析器SPID为57,这样在使用profile的时候就可以指定当前窗体进行监控。状态栏在查询窗口的右下角。 20、获取脚本的执行时间declare @timediff datetime select @timediff=getdate() select * from Suppliers print &#39;耗时:&#39;+ convert(varchar(10),datediff(ms,@timediff,getdate())) 结果如下： 在状态栏是不会精确到毫秒的，只能精确到秒 这个脚本可以更加有效的查看SQL代码的执行效率。","categories":[{"name":"转载","slug":"转载","permalink":"http://yoursite.com/categories/转载/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"}],"author":"smilecoc"},{"title":"经典SQL语句大全","slug":"经典SQL语句大全","date":"2019-09-30T16:00:00.000Z","updated":"2020-02-20T13:47:13.180Z","comments":true,"path":"2019/10/01/经典SQL语句大全/","link":"","permalink":"http://yoursite.com/2019/10/01/经典SQL语句大全/","excerpt":"","text":"一、基础部分 1、创建数据库 CREATE DATABASE dbname 2、删除数据库 DROP DATABASE dbname 3、创建新表 CREATE TABLE tabname( col1 type1 [not null] [primary key], col2 type2 [not null],.. ) 根据已有的表创建新表/使用旧表创建新表: create table tab_new as select col1, col2… from tab_old 4、删除新表 DROP TABLE tablename 5、增加一个列 Alter table tabname add column col type 6、添加主键： Alter table tabname add primary key(col) 删除主键： Alter table tabname drop primary key(col) 7、创建索引： create [unique] index idxname on tabname(col….) 删除索引： drop index idxname 注：索引是不可更改的，想更改必须删除重新建。 8、创建视图： create view viewname as select statement 删除视图： drop view viewname 9、几个简单的sql语句–选择： select * from table1 where 范围 –插入： insert into table1(field1,field2) values(value1,value2) –删除： delete from table1 where 范围 –更新： update table1 set field1=value1 where 范围 –查找： select * from table1 where field1 like ’%value1%’ –排序： select * from table1 order by field1,field2 [desc] –总数： select count as totalcount from table1 –求和： select sum(field1) as sumvalue from table1 –平均： select avg(field1) as avgvalue from table1 –最大： select max(field1) as maxvalue from table1 –最小： select min(field1) as minvalue from table1 10、几个高级查询运算词 A：UNION 运算符UNION 运算符通过组合其他两个结果表，并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION 一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。 B：EXCEPT 运算符EXCEPT运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。 C：INTERSECT 运算符 INTERSECT运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。注：使用运算词的几个查询结果行必须是一致的。 11、使用外连接A、left （outer） join：左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。 select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c B：right （outer） join 右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。 C：full/cross （outer） join：全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。 12、Group by 对列进行分组，常与聚合函数(count,sum,max,min,avg )一起使用 注意： 在分组时：不能以text,ntext,image类型的字段作为分组依据 在select统计函数中的字段，不能和普通的字段放在一起； 二、进阶部分 1、复制表(只复制表结构,源表名：a 新表名：b)–方法一 仅用于SQL Server： select * into b from a where 1&lt;&gt;1 –方法二： select top 0 * into b from a 2、拷贝表(拷贝数据,源表名：a 目标表名：b) insert into b(a, b, c) select d,e,f from b; 3、子查询(表名1：a 表名2：b) select a,b,c from a where a IN (select d from b ) 或者: select a,b,c from a where a IN (1,2,3) 4、显示文章、提交人和最后回复时间 select a.title, a.username, b.adddate from table a, (select max(adddate) adddate from table where table.title=a.title) b 5、外连接查询(表名1：a 表名2：b) select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c 6、在线视图查询(表名1：a ) select * from ( SELECT a,b,c FROM a ) T where t.a &gt; 1; 7、between的用法,between限制查询数据范围时包括了边界值,not between不包括 select * from table1 where time between time1 and time2 select a,b,c, from table1 where a not between 数值1 and 数值2 8、in 的使用方法 select * from table1 where a [not] in (‘值1’,’值2’,’值4’,’值6’) 9、两张关联表，删除主表中已经在副表中没有的信息 delete from table1 where not exists ( select * from table2 where table1.field1=table2.field1 ) 10、四表联查问题： select * from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where ... 11、日程安排提前五分钟提醒 select * from 日程安排 where datediff(&#39;minute&#39;,f开始时间,getdate())&gt;5 12、一条sql 语句搞定数据库分页 select top 10 b.* from ( select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc ) a, 表名 b where b.主键字段 = a.主键字段 order by a.排序字段具体 实现：关于数据库分页： declare @start int,@end int @sql nvarchar(600) set @sql=’select top’+str(@end-@start+1)+’+from T where rid not in( select top’+str(@str-1)+’Rid from T where Rid&gt;-1)’ exec sp_executesql @sql 13、前10条记录 select top 10 * form table1 where 范围 14、包括所有在 TableA中但不在 TableB和TableC中的行并消除所有重复行而派生出一个结果表 (select a from tableA ) except (select a from tableB) except (select a from tableC) 15、随机取出10条数据 select top 10 * from tablename order by newid() 16、说明：删除重复记录 --方法一 delete from tablename where id not in (select max(id) from tablename group by col1,col2,...) --方法二 select distinct * into temp from tablename delete from tablename insert into tablename select * from temp 评价：这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作3),例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段 alter table tablename --添加一个自增列 add column_b int identity(1,1) delete from tablename where column_b not in( select max(column_b) from tablename group by column1,column2,... ) alter table tablename drop column column_b 17、列出数据库里所有的表名 use master go select name from sysobjects where type=&#39;U&#39; // U代表用户 18、列出表里的所有的列名 use master go select name from syscolumns where id=object_id(&#39;TableName&#39;) 19、初始化表table1 TRUNCATE TABLE table1 20、选择从10到15的记录 select top 5 * from ( select top 15 * from table order by id asc ) table_别名 order by id desc 三、开发技巧 1、where 1=1是表示选择全部，where 1=2全部不选 if @strWhere !=&#39;&#39; begin set @strSQL = &#39;select count(*) as Total from [&#39; + @tblName + &#39;] where &#39; + @strWhere end else begin set @strSQL = &#39;select count(*) as Total from [&#39; + @tblName + &#39;]&#39; end 我们可以直接写成 set @strSQL = &#39;select count(*) as Total from [&#39; + @tblName + &#39;] where 1=1 &#39;+ @strWhere 2、收缩数据库 --重建索引 DBCC REINDEX DBCC INDEXDEFRAG --收缩数据和日志 DBCC SHRINKDB DBCC SHRINKFILE 3、压缩数据库 dbcc shrinkdatabase(dbname) 4、转移数据库给新用户以已存在用户权限 exec sp_change_users_login &#39;update_one&#39;,&#39;newname&#39;,&#39;oldname&#39; go 5、检查备份集 RESTORE VERIFYONLY from disk=&#39;E:\\dvbbs.bak&#39; 6、修复数据库 ALTER DATABASE [dvbbs] SET SINGLE_USER GO DBCC CHECKDB(&#39;dvbbs&#39;,repair_allow_data_loss) WITH TABLOCK GO ALTER DATABASE [dvbbs] SET MULTI_USER GO 7、日志清除 SET NOCOUNT ON DECLARE @LogicalFileName sysname, @MaxMinutes INT, @NewSize INT USE tablename -- 要操作的数据库名 SELECT @LogicalFileName = &#39;tablename_log&#39;, -- 日志文件名 @MaxMinutes = 10, -- Limit on time allowed to wrap log. @NewSize = 1 -- 你想设定的日志文件的大小(M) Setup / initialize DECLARE @OriginalSize int SELECT @OriginalSize = size FROM sysfiles WHERE name = @LogicalFileName SELECT &#39;Original Size of &#39; + db_name() + &#39; LOG is &#39; + CONVERT(VARCHAR(30),@OriginalSize) + &#39; 8K pages or &#39; + CONVERT(VARCHAR(30),(@OriginalSize*8/1024)) + &#39;MB&#39; FROM sysfiles WHERE name = @LogicalFileName CREATE TABLE DummyTrans (DummyColumn char (8000) not null) DECLARE @Counter INT, @StartTime DATETIME, @TruncLog VARCHAR(255) SELECT @StartTime = GETDATE(), @TruncLog = &#39;BACKUP LOG &#39; + db_name() + &#39; WITH TRUNCATE_ONLY&#39; DBCC SHRINKFILE (@LogicalFileName, @NewSize) EXEC (@TruncLog) -- Wrap the log if necessary. WHILE @MaxMinutes &gt; DATEDIFF (mi, @StartTime, GETDATE()) -- time has not expired AND @OriginalSize = (SELECT size FROM sysfiles WHERE name = @LogicalFileName) AND (@OriginalSize * 8 /1024) &gt; @NewSize BEGIN -- Outer loop. SELECT @Counter = 0 WHILE ((@Counter &lt; @OriginalSize / 16) AND (@Counter &lt; 50000)) BEGIN -- update INSERT DummyTrans VALUES (&#39;Fill Log&#39;) DELETE DummyTrans SELECT @Counter = @Counter + 1 END EXEC (@TruncLog) END SELECT &#39;Final Size of &#39; + db_name() + &#39; LOG is &#39; + CONVERT(VARCHAR(30),size) + &#39; 8K pages or &#39; + CONVERT(VARCHAR(30),(size*8/1024)) + &#39;MB&#39; FROM sysfiles WHERE name = @LogicalFileName DROP TABLE DummyTrans SET NOCOUNT OFF 8、更改某个表 exec sp_changeobjectowner &#39;tablename&#39;,&#39;dbo&#39; 9、存储更改全部表 CREATE PROCEDURE dbo.User_ChangeObjectOwnerBatch @OldOwner as NVARCHAR(128), @NewOwner as NVARCHAR(128) AS DECLARE @Name as NVARCHAR(128) DECLARE @Owner as NVARCHAR(128) DECLARE @OwnerName as NVARCHAR(128) DECLARE curObject CURSOR FOR select &#39;Name&#39; = name, &#39;Owner&#39; = user_name(uid) from sysobjects where user_name(uid)=@OldOwner order by name OPEN curObject FETCH NEXT FROM curObject INTO @Name, @Owner WHILE(@@FETCH_STATUS=0) BEGIN if @Owner=@OldOwner begin set @OwnerName = @OldOwner + &#39;.&#39; + rtrim(@Name) exec sp_changeobjectowner @OwnerName, @NewOwner end -- select @name,@NewOwner,@OldOwner FETCH NEXT FROM curObject INTO @Name, @Owner END close curObject deallocate curObject GO 10、SQL SERVER中直接循环写入数据 declare @i int set @i=1 while @i&lt;30 begin insert into test (userid) values(@i) set @i=@i+1 end 案例：有如下表，要求就裱中所有沒有及格的成績，在每次增長0.1的基礎上，使他們剛好及格: Name score Zhangshan 80 Lishi 59 Wangwu 50 Songquan 69 while((select min(score) from tb_table)&lt;60) begin update tb_table set score =score*1.01 where score&lt;60 if (select min(score) from tb_table)&gt;60 break else continue end","categories":[{"name":"转载","slug":"转载","permalink":"http://yoursite.com/categories/转载/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"}],"author":"smilecoc"},{"title":"博客搭建记录","slug":"我的博客搭建全记录","date":"2019-08-20T04:34:02.000Z","updated":"2020-02-20T13:46:15.656Z","comments":true,"path":"2019/08/20/我的博客搭建全记录/","link":"","permalink":"http://yoursite.com/2019/08/20/我的博客搭建全记录/","excerpt":"","text":"本博客利用hexo+github搭建，在此详细记录下我是如何利用hexo+github搭建静态博客以及一些配置相关问题，以免过后遗忘，且当备份之用，并希望可以为其他有需要的人提供前车之鉴，少走弯路。 开始搭建安装node.js下载node.js并安装（官网下载安装），默认会安装npm。打开cmd命令行，成功的标志如下： 安装git下载安装git（官网下载安装）,安装成功的象征就是在电脑上任何位置鼠标右键能够出现Git GUI Here和Git Bash here如下两个选择注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大 Github建立项目Github账户注册和新建项目（new repository），项目必须要遵守格式：账户名.github.io，并且需要勾选Initialize this repository with a README。在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。 安装hexo安装Hexo，在自己认为合适的地方建了一个blog文件夹。然后通过命令行进入到该文件夹里面为什么要新创建blog文件呢？因为hexo 初始化需要文件夹为null的，所以确保路径简单且路径中不要有中文输入npm install hexo -g，开始安装Hexo输入** hexo -v 查看是否安装成功，如果成功安装会显示出安装的版本信息输入hexo init，初始化该文件夹（有点漫长的等待。。。）个人在这一步一直出现报错，先出现‘git’ is not recognized as an internal or external command错误，后来又出现Permission denied错误，耽误了好几个小时，后来发现使用hexo init 都可以解决看到 Start blogging with Hexo！ 则表明安装成功。在cmd中输入npm install，安装所需要的组件输入hexo g，首次体验Hexo输入hexo s，开启服务器，访问该网址（即提示中的http://localhost:4000/），正式体验Hexo如果页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入hexo server -p 端口号**来改变端口号 连接Hexo与Github将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）首先在新建的blog文件夹里面鼠标右键，点击Git Bash Here。这里“06866”可以替换成自己的用户名，邮箱可以替换成自己的邮箱输入cd ~/.ssh，检查是否由.ssh的文件夹 ls 查看ssh 密钥生成连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub接着输入eval “$(ssh-agent -s)”，回车，添加密钥到ssh-agent再输入ssh-add ~/.ssh/id_rsa，回车，添加生成的SSH key到ssh-agent接着登录Github，点击头像下的settings，点击new ssh key输入cat id_rsa.pub生成一个new ssh key，将生成后的内容复制到上一步的github中的new ssh key中输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了 如果ssh-key配置失败，那么只要按照以下步骤就能完全解决 首先，清除所有的key-pair，输入ssh-add -D和rm -r ~/.ssh删除你在github中的public-key 重新生成ssh密钥对，输入ssh-keygen -t rsa -C “xxx@xxx.com“ 接下来正常操作在github上添加公钥public-key: 1、首先在你的终端运行xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板 2、在github上添加公钥时，直接复制即可 3、保存 测试：在终端ssh -T git@github.com 修改Deployment值在之前新建的blog文件夹中，找到_config.yml文件，修改Deployment值（在末尾）,将 deploy: type: 更改为： deploy: type: git repository: git@github.com:xxxx/xxxx.github.io.git branch: master repository值是你在github项目里的ssh（右下角） 完成建站并新建博客新建一篇博客，在cmd执行命令：hexo new post “博客名”，就可以在blog/_posts/中找到已创建的文件。在生成以及部署文章之前，需要安装一个扩展，在cmd中输入npm install hexo-deployer-git –save，并将刚刚生成的文件编辑好后cmd中输入命令hexo d -g即可生成部署文章 至此，一个具备基础功能的博客就完成了 绑定自己的域名购买域名国内的域名服务商有新网，腾讯云，还有阿里云的万网等。下面以阿里云的万网为例：在万网购买了自己心仪的域名后，进入阿里云的管理控制台-域名与网站-域名就可以看到购买的域名此时的域名状态是未实名认证的，然后就是实名认证（一般需要2小时左右）。 域名解析首先获取自己 github 的二级域名的 IP地址，windows 下直接在 cmd 里 Ping 一下自己的博客就会得到 IP 地址：ping username.github.io,其中username为自己的github用户名 下面通过 DNS域名解析将购买的域名指向 github 的二级域名：username.github.io，进入阿里云的管理控制台-域名与网站-云解析 DNS，进入域名的解析设置，点击新手指导，将得到的 IP 地址填到记录值一栏，点击确定就 OK 了。填完以后的解析列表会出现： 记录值就是自己 github 的二级域名的 IP地址。 设置CNAME在 本地hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如： 在 github 上面，打开 username.github.io 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。比如：这样新域名配置完成，可以使用新的网名访问自己的博客了 更换主题Hexo有许多的个性化主题可供选择，有兴趣的可以直接搜索hexo主题进入hexo的官网查看，我使用的是hexo sakura主题，github 地址为https://github.com/honjun/hexo-theme-sakura，在这里也能找到主题的大部分使用方法，这一部分主要是作者的教程+一些自己摸索出来的教程+其他搜索问题时的教程 主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 主题配置找到 /themes/sakura/config.yml 这个配置文件中修改，跟着作者的注释修改即可。注意一下所有的文件带有注释，所以最好找到自己的电脑中的文件对照改，以免出错。 站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名，即网站的左上角的名称 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改为自己的博客的网址】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ CDN搭建这其中涉及到搭建cdn,可以直接去视屏地址看，直接看文字版如下： 国内加载github的资源比较慢，需要使用CDN加速来优化网站打开速度，于是使用jsDeliver+github搭建免费的cdn。jsDelivr 是一个免费开源的 CDN 解决方案，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源 什么是CDNCDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。 国内加载github的资源比较慢，需要使用CDN加速来优化网站打开速度，于是使用jsDeliver+github搭建免费的CDN，非常适合博客网站使用。 jsDelivr 是一个免费开源的 CDN 解决方案，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源。 NPM是JavaScript的包管理器，也是世界上最大的软件注册中心。发现可重用代码的包——并以强大的新方式组装它们。每星期大约有 30 亿次的下载量，包含超过 600000 个 包（package） （即，代码模块）。来自各大洲的开源软件开发者使用 npm 互相分享和借鉴。包的结构使您能够轻松跟踪依赖项和版本。 所以jsDeliver+npm就是把npm上的包当做cdn的存储。jsDeliver不支持加载超过20M的资源，所以一些视频最好压缩到20M以下 第一步：新建github仓库 第二步：克隆Github仓库到本地 $ git clone 你的仓库链接 # 本地克隆github仓库 第三步：上传需要的资源在本地目录右键 Git Bash Here,复制需要的静态资源到本地git仓库中，提交到github仓库上。亦可以github直接上传文件命令如下： // 查看状态 git status // 添加到库中 git add . // 提交更新（引号内 为自定义信息说明） git commit -m &#39;第一次提交&#39; // 推送至远程仓库 git push第四步：发布仓库点击release发布 发布版本号为1.0（自定义） 同时也可以直接在建立的仓库中直接上传文件，这一部分是github的操作，不多赘述 第五步：通过jsDeliver引用资源使用方法：https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径比如：//加载图片https://cdn.jsdelivr.net/gh/Zevs6/CDN/img/avatar.jpg 注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下： // 加载任何Github发布、提交或分支https://cdn.jsdelivr.net/gh/user/repo@version/file // 加载 jQuery v3.2.1https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js // 使用版本范围而不是特定版本https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.jshttps://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js // 完全省略该版本以获取最新版本https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js // 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js // 在末尾添加 / 以获取资源目录列表https://cdn.jsdelivr.net/gh/jquery/jquery/ 子页面与其他细节修改：去掉prefixName如果想去掉prefixName（网页左上角的网站名称前半部分），可在 /themes/sakura/source/css/style.css下修改了样式表去掉prefixName即可。大家如果想修改其相关的样式也可以去这个css文件中自定义,这个文件是主要的css文件，大部分的样式都是由这个文件定义的。 网页顶部导航栏网页顶部导航栏可以在/themes/sakura/config.yml中的meuns:下修改，如果有需要，可以修改名称，也可以直接删除，生成的网页会随之变动前面的path是网页路径，这个不建议修改，但可以修改。后面的如: fa: fas fa-home fa-1x 这个就是对应的图标设置,关于这个图标大家可以去fontawesome看教程以及选择自己喜欢的图标，导航栏下拉下拉菜单的图标修改和导航栏相同。 社交栏样式社交栏的样式在 /themes/sakura/source/css/style.css中可以修改， Ctrl+f 搜索 header-info即可，建议没有必要就不修改了 模块更名startdash模块更改名称：在 /themes/sakura/layout/_partial/startdash.ejs中有： &lt;div class=&quot;top-feature-row&quot;&gt; &lt;h1 class=&quot;fes-title&quot; style=&quot;font-family: &#39;Ubuntu&#39;, sans-serif;&quot;&gt; &lt;i class=&quot;fa fa-anchor&quot; aria-hidden=&quot;true&quot;&gt; &lt;/i&gt; startdash&lt;/h1&gt; &lt;% for (dash in theme.startdash) { %&gt; .... 更改其中的startdash即可同样如果要更改discovery模块的名称，在/themes/sakura/layout/index.ejs中找到如下代码： &lt;h1 class=&quot;main-title&quot; style=&quot;font-family: &#39;Ubuntu&#39;, sans-serif;&quot;&gt; &lt;i class=&quot;fa fa-envira&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Discovery&lt;/h1&gt; &lt;%- partial(&#39;_partial/archive&#39;, {pagination: 2, index: true}) %&gt; &lt;!-- 首页默认取最最新文章集 --&gt; 修改discovery即可 文章的封面，归档设置在你写博客时的md文件中可以自由设置，下面是示例： title: Sakura美化教程#文章的标题 author: hojun#作者名称 avatar: https://wx1.sinaimg.cn/large/006bYVyvgy1ftand2qurdj303c03cdfv.jpg#文章标题下作者的图标，如果不加会导致图片缺失，比较丑 authorLink: https://yremp.club#作者链接 authorAbout: authorDesc: categories: 技术#对应网页顶部导航栏归档 date: 2019-5-26 12:16:01 comments: true tags: - web keywords: Sakura主题自定义美化教程 description: Sakura美化教程 photos: https://static.2heng.xin/wp-content/uploads//2019/02/wallhaven-672007-1-1024x576.png#封面的图片链接 --- 归档子页面归档子页面下的图片/封面设置在 /themes/sakura/language/zh-cn.yml，找到如下代码： #category 技术: zh: 野生技术协会 en: Technical Communication img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(1).jpg.webp 生活: zh: 生活 en: Live img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(2).jpg.webp ...... 这一个子页面同样是和之前设置的相关的，自己有几个归档分类就自己添加即可 悦读和图集在 /themes/sakura/language/zh-cn.yml修改： #tag 悦读: img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(6).jpg.webp 图集: img: https://cdn.jsdelivr.net/gh/yremp/cdn@2.1.5/img/cover/(5).jpg.webp web: img: https://cdn.jsdelivr.net/gh/yremp/resource@1.0/img/pic.jpg 番组注意：这个souce文件夹需要放在blog一级的文件夹下，如果没有的话在下载的sakura文件中复制粘贴这个页面对应的配置是在 /source/bangumi/index.md中修改，其中代码如下,对照网页修改即可 --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: - img: http://pic.netbian.com/uploads/allimg/180413/121552-152359295246db.jpg title: 狐妖小红娘 status: 追番中 progress: 100 jp: 狐妖小红娘 time: 2019-05-24 SUN. desc: 白月初…… - img: http://pic.netbian.com/uploads/allimg/170605/130458-149663909840b3.jpg title: 名侦探柯南 status: 追番中 progress: 1000 jp: 名探偵コナン time: 2019-05-24 SUN. desc: 中生侦探工藤新一…… --- 歌单整个页面配置在 /source/music/index.md中： --- title: music date: 2018-12-20 23:14:28 keywords: 喜欢的音乐 description: comments: false photos: http://pic.netbian.com/uploads/allimg/170911/233802-15051442827782.jpg --- &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=100% height=450 src=&quot;//music.163.com/outchain/player?type=0&amp;id=762797776&amp;auto=1&amp;height=430&quot;&gt;&lt;/iframe&gt; photos就是这个页面的顶部图片，id就是网易云音乐歌单id，登录网页版网易云音乐，打开歌单就可以在网址中找到 友链配置友情链接内容配置具体在 /source/link/index.md中，界面背景及布局主要在/themes/sakura/layout/links.ejs 其他事项 网页顶部导航栏归档如果某一个分类下没有添加文件，则会出现not foung页面，所以对应的上一步中的categories需要与_config文件中的对应 注意所有的md文件中的：后都有一个空格（不知道改如何叫，键值对？） 其他的后续问题，bug等归纳整理到Hexo Sakura主题遇到的问题汇总供参考 添加一个看板娘就是右下角的卡通人物 基础版看板娘项目地址 live2d模型 部分模型预览 首先进入Hexo博客根目录安装live2d插件 $ npm install --save hexo-helper-live2d 接着，修改根目录下的 *_config.yml *文件 添加自定义配置(下面提供我的配置做参考)： ## live2d live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-z16 scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 150 height: 300 position: right hOffset: 0 vOffset: -20 mobile: show: true scale: 0.5 react: opacityDefault: 0.7 opacityOnHover: 0.2 细心一点肯定能发现 model.use 后的字符串就是看板娘模型的名字 现在你就可以进入模型预览 挑选自己喜欢的看板娘啦 现在假设你所挑选的看板娘也是z16 你有几种方式让看板娘进驻你的Hexo博客，这里只提供最方便的一种(命令安装)。 进入博客根目录输入以下命令： $ npm install live2d-widget-model-z16 再将 *_config.yml *中 model.use检查 一遍确保与你安装的名称一致 到此处看板娘进驻成功 进阶版看板娘如何安装看板娘傻瓜式安装只需在网页中引入这三行代码即可 &lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;/&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt; 在 主题配置文件 中,新增如下内容： live2d: enable: true 如果你想折腾一翻，请看下面本插件需要jQuery和font-awesome支持，请确保它们已在页面中加载，例如在中加入： &lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;&gt; 否则无法正常显示。（如果你的网页已经加载了jQuery，就不要重复加载了） 你可以直接这样使用： &lt;script src=&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt; 将这一行代码加入或，即可看到效果。如果你的网站启用了PJAX，由于看板娘不必每页刷新，因此需要注意将相关脚本放到PJAX刷新区域之外。L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/koharu.model.json\"},\"display\":{\"position\":\"right\",\"width\":300,\"height\":450},\"log\":false}); 换句话说，如果你是小白，或者只需要最基础的功能，就只需要： 把这一行代码，连同前面的两行代码，一起放到html的中即可；如果页面是用各种模版引擎、php、asp生成的，也要自行修改，方法类似，只是可能略为麻烦。但是！我们强烈推荐自己进行配置，否则很多功能是不完整的，并且可能产生问题！如果你还有兴趣自己折腾的话，请看下面的详细说明。算了不搞你们了，如果搞不到，请使用傻瓜式安装 如果要自定义有关内容，可以把这个仓库Fork一份，然后进行修改。这时，使用方法对应地变为 &lt;script src=&quot;https://cdn.jsdelivr.net/gh/username/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt; 将username替换为你的GitHub用户名即可。 定制看板娘的语录1.从github中下载项目: https://github.com/stevenjoezhang/live2d-widget2.更改waifu-tip.json里面的内容详情3.更改autoload.js的引入位置将下载的文件解压到本地博客目录的themes/主题文件夹/source下，修改autoload.js文件，如下： 将 改成const live2d_path = “/live2d-widget/“; 想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css。 推荐一个 Live2D 模型资源收集站：https://mx-model.ga/","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}],"author":"smilecoc"},{"title":"2019年，小破站建立撒花~","slug":"2019年","date":"2019-08-05T16:00:00.000Z","updated":"2020-02-20T10:37:56.550Z","comments":true,"path":"2019/08/06/2019年/","link":"","permalink":"http://yoursite.com/2019/08/06/2019年/","excerpt":"","text":"2019年8月6日，小破站成功建立起来啦~恭喜又新增了一个坑（囧） 今年开了很多的新坑，以后要一个一个填上~ 关于我的其他新开的坑，请关注–&gt; 微信公众号：Romi的杂货铺，时不时的会写一些文章 B站：up主的主页，时不时的会转载和制作一些视频 简书：简书主页，一些转载的，原创的，各种杂乱的文章可能都有","categories":[{"name":"随想","slug":"随想","permalink":"http://yoursite.com/categories/随想/"}],"tags":[{"name":"随想","slug":"随想","permalink":"http://yoursite.com/tags/随想/"}],"author":"smilecoc"}]}